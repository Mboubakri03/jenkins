pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    environment {
        SONAR_PROJECT_KEY = 'jenkinstest'
        SONAR_ENV_NAME = 'sonar-token'
        GIT_URL = 'https://github.com/Mboubakri03/jenkins.git'
        BRANCH_NAME = 'master'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checking out the code...'
                    try {
                        git branch: BRANCH_NAME, url: GIT_URL
                    } catch (Exception e) {
                        error "Git checkout failed: ${e.message}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    echo 'Building the application...'
                    try {
                        sh 'mvn clean package'
                    } catch (Exception e) {
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running tests...'
                    try {
                        sh 'mvn test'
                    } catch (Exception e) {
                        error "Tests failed: ${e.message}"
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    echo 'Starting SonarQube analysis...'
                    try {
                        withSonarQubeEnv(SONAR_ENV_NAME) {
                            sh "mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECT_KEY}"
                        }
                    } catch (Exception e) {
                        error "SonarQube analysis failed: ${e.message}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo 'Deploying the application...'
                    try {
                        sh 'java -jar target/jenkinstest-0.0.1-SNAPSHOT.jar'
                    } catch (Exception e) {
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed!'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
        cleanup {
            echo 'Performing cleanup operations...'
        }
    }
}
